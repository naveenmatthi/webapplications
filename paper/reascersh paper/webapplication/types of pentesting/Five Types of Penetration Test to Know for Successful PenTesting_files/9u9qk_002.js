var $=jQuery.noConflict();
jQuery.fn.exists=function(callback){
var args=[].slice.call(arguments, 1);
if(this.length){
callback.call(this, args);
}
return this;
};
jQuery(document).ready(function(){
if(jQuery('#calendar_wrap').length){
jQuery('#calendar_wrap #today').each(function(){
var $this=jQuery(this),
dayIndex=$this.index();
$this.closest('#wp-calendar').find('thead tr th').eq(dayIndex).addClass('today');
});
}});
jQuery(document).ready(function(){
jQuery("body").prepend("<span id='move-to-top' style='font-size: 18px;background: #ffa312;height:38px;width:38px;text-align: center;padding-top:5px;'>&#9650;</span>");
var scrollDes='html,body';
if(navigator.userAgent.match(/opera/i)){
scrollDes='html';
}
jQuery(window).scroll(function (){
if(jQuery(this).scrollTop() > 160){
jQuery('#move-to-top').addClass('filling').removeClass('hiding');
}else{
jQuery('#move-to-top').removeClass('filling').addClass('hiding');
}});
jQuery('#move-to-top').click(function (){
jQuery(scrollDes).animate({
scrollTop: 0
},{
duration :500
});
});
});
if(mts_customscript.responsive&&mts_customscript.nav_menu!='none'){
jQuery(document).ready(function($){
$('.secondary-navigation').append('<div id="mobile-menu-overlay" />');
if(!$('#navigation.mobile-only').length){
$('#navigation').not('.mobile-menu-wrapper').find('.menu').clone().appendTo('.mobile-menu-wrapper').hide();
}
$('.toggle-mobile-menu').click(function(e){
e.preventDefault();
e.stopPropagation();
$('body').toggleClass('mobile-menu-active');
if($('body').hasClass('mobile-menu-active')){
if($(document).height() > $(window).height()){
var scrollTop=($('html').scrollTop()) ? $('html').scrollTop():$('body').scrollTop();
$('html').addClass('noscroll').css('top', -scrollTop);
}
$('#mobile-menu-overlay').fadeIn();
}else{
var scrollTop=parseInt($('html').css('top'));
$('html').removeClass('noscroll');
$('html,body').scrollTop(-scrollTop);
$('#mobile-menu-overlay').fadeOut();
}});
}).on('click', function(event){
var $target=jQuery(event.target);
if(( $target.hasClass("fa")&&$target.parent().hasClass("toggle-caret"))||$target.hasClass("toggle-caret")){
return;
}
jQuery('body').removeClass('mobile-menu-active');
jQuery('html').removeClass('noscroll');
jQuery('#mobile-menu-overlay').fadeOut();
});
}
jQuery(document).ready(function($){
function mtsDropdownMenu(){
var wWidth=$(window).width();
if(wWidth > 865){
$('#navigation ul.sub-menu, #navigation ul.children').hide();
var timer;
var delay=100;
$('#navigation li').hover(function(){
var $this=$(this);
timer=setTimeout(function(){
$this.children('ul.sub-menu, ul.children').slideDown('fast');
}, delay);
},
function(){
$(this).children('ul.sub-menu, ul.children').hide();
clearTimeout(timer);
}
);
}else{
$('#navigation li').unbind('hover');
$('#navigation li.active > ul.sub-menu, #navigation li.active > ul.children').show();
}}
mtsDropdownMenu();
$(window).resize(function(){
mtsDropdownMenu();
});
});
jQuery(document).ready(function($){
$('.widget_nav_menu, #navigation .menu').addClass('toggle-menu');
$('.toggle-menu ul.sub-menu, .toggle-menu ul.children').addClass('toggle-submenu');
$('.toggle-menu ul.sub-menu').parent().addClass('toggle-menu-item-parent');
$('.toggle-menu .toggle-menu-item-parent').append('<span class="toggle-caret" style="font-weight: bold;font-size:30px;">+</span>');
$('.toggle-caret').click(function(e){
e.preventDefault();
$(this).parent().toggleClass('active').children('.toggle-submenu').slideToggle('fast');
});
});
jQuery(document).ready(function(){
jQuery.fn.exists=function(callback){
var args=[].slice.call(arguments, 1);
if(this.length){
callback.call(this, args);
}
return this;
};
(function(d, s){
var js, fjs=d.getElementsByTagName(s)[0], load=function(url, id){
if(d.getElementById(id)){return;}
js=d.createElement(s); js.src=url; js.id=id;
fjs.parentNode.insertBefore(js, fjs);
};
jQuery('span.facebookbtn, span.facebooksharebtn, .facebook_like').exists(function(){
load('//connect.facebook.net/en_US/all.js#xfbml=1', 'fbjssdk');
});
jQuery('span.gplusbtn').exists(function(){
load('https://apis.google.com/js/plusone.js', 'gplus1js');
});
jQuery('span.twitterbtn').exists(function(){
load('//platform.twitter.com/widgets.js', 'tweetjs');
});
jQuery('span.linkedinbtn').exists(function(){
load('//platform.linkedin.com/in.js', 'linkedinjs');
});
jQuery('span.pinbtn').exists(function(){
load('//assets.pinterest.com/js/pinit.js', 'pinterestjs');
});
jQuery('span.stumblebtn').exists(function(){
load('//platform.stumbleupon.com/1/widgets.js', 'stumbleuponjs');
});
}(document, 'script'));
});
(function($){
function maybeCall(thing, ctx){
return (typeof thing=='function') ? (thing.call(ctx)):thing;
};
function isElementInDOM(ele){
while (ele=ele.parentNode){
if(ele==document) return true;
}
return false;
};
function Tipsy(element, options){
this.$element=$(element);
this.options=options;
this.enabled=true;
this.fixTitle();
};
Tipsy.prototype={
show: function(){
var title=this.getTitle();
if(title&&this.enabled){
var $tip=this.tip();
$tip.find('.tipsy-inner')[this.options.html ? 'html':'text'](title);
$tip[0].className='tipsy';
$tip.remove().css({top: 0, left: 0, visibility: 'hidden', display: 'block'}).prependTo(document.body);
var pos=$.extend({}, this.$element.offset(), {
width: this.$element[0].offsetWidth,
height: this.$element[0].offsetHeight
});
var actualWidth=$tip[0].offsetWidth,
actualHeight=$tip[0].offsetHeight,
gravity=maybeCall(this.options.gravity, this.$element[0]);
var tp;
switch (gravity.charAt(0)){
case 'n':
tp={top: pos.top + pos.height + this.options.offset, left: pos.left + pos.width / 2 - actualWidth / 2};
break;
case 's':
tp={top: pos.top - actualHeight - this.options.offset, left: pos.left + pos.width / 2 - actualWidth / 2};
break;
case 'e':
tp={top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth - this.options.offset};
break;
case 'w':
tp={top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width + this.options.offset};
break;
}
if(gravity.length==2){
if(gravity.charAt(1)=='w'){
tp.left=pos.left + pos.width / 2 - 15;
}else{
tp.left=pos.left + pos.width / 2 - actualWidth + 15;
}}
$tip.css(tp).addClass('tipsy-' + gravity);
$tip.find('.tipsy-arrow')[0].className='tipsy-arrow tipsy-arrow-' + gravity.charAt(0);
if(this.options.className){
$tip.addClass(maybeCall(this.options.className, this.$element[0]));
}
if(this.options.fade){
$tip.stop().css({opacity: 0, display: 'block', visibility: 'visible'}).animate({opacity: this.options.opacity});
}else{
$tip.css({visibility: 'visible', opacity: this.options.opacity});
}}
},
hide: function(){
if(this.options.fade){
this.tip().stop().fadeOut(function(){ $(this).remove(); });
}else{
this.tip().remove();
}},
fixTitle: function(){
var $e=this.$element;
if($e.attr('title')||typeof($e.attr('original-title'))!='string'){
$e.attr('original-title', $e.attr('title')||'').removeAttr('title');
}},
getTitle: function(){
var title, $e=this.$element, o=this.options;
this.fixTitle();
var title, o=this.options;
if(typeof o.title=='string'){
title=$e.attr(o.title=='title' ? 'original-title':o.title);
}else if(typeof o.title=='function'){
title=o.title.call($e[0]);
}
title=('' + title).replace(/(^\s*|\s*$)/, "");
return title||o.fallback;
},
tip: function(){
if(!this.$tip){
this.$tip=$('<div class="tipsy"></div>').html('<div class="tipsy-arrow"></div><div class="tipsy-inner"></div>');
this.$tip.data('tipsy-pointee', this.$element[0]);
}
return this.$tip;
},
validate: function(){
if(!this.$element[0].parentNode){
this.hide();
this.$element=null;
this.options=null;
}},
enable: function(){ this.enabled=true; },
disable: function(){ this.enabled=false; },
toggleEnabled: function(){ this.enabled = !this.enabled; }};
$.fn.tipsy=function(options){
if(options===true){
return this.data('tipsy');
}else if(typeof options=='string'){
var tipsy=this.data('tipsy');
if(tipsy) tipsy[options]();
return this;
}
options=$.extend({}, $.fn.tipsy.defaults, options);
function get(ele){
var tipsy=$.data(ele, 'tipsy');
if(!tipsy){
tipsy=new Tipsy(ele, $.fn.tipsy.elementOptions(ele, options));
$.data(ele, 'tipsy', tipsy);
}
return tipsy;
}
function enter(){
var tipsy=get(this);
tipsy.hoverState='in';
if(options.delayIn==0){
tipsy.show();
}else{
tipsy.fixTitle();
setTimeout(function(){ if(tipsy.hoverState=='in') tipsy.show(); }, options.delayIn);
}};
function leave(){
var tipsy=get(this);
tipsy.hoverState='out';
if(options.delayOut==0){
tipsy.hide();
}else{
setTimeout(function(){ if(tipsy.hoverState=='out') tipsy.hide(); }, options.delayOut);
}};
if(!options.live) this.each(function(){ get(this); });
if(options.trigger!='manual'){
var binder=options.live ? 'live':'bind',
eventIn=options.trigger=='hover' ? 'mouseenter':'focus',
eventOut=options.trigger=='hover' ? 'mouseleave':'blur';
this[binder](eventIn, enter)[binder](eventOut, leave);
}
return this;
};
$.fn.tipsy.defaults={
className: null,
delayIn: 0,
delayOut: 0,
fade: false,
fallback: '',
gravity: 'n',
html: false,
live: false,
offset: 0,
opacity: 0.8,
title: 'title',
trigger: 'hover'
};
$.fn.tipsy.revalidate=function(){
$('.tipsy').each(function(){
var pointee=$.data(this, 'tipsy-pointee');
if(!pointee||!isElementInDOM(pointee)){
$(this).remove();
}});
};
$.fn.tipsy.elementOptions=function(ele, options){
return $.metadata ? $.extend({}, options, $(ele).metadata()):options;
};
$.fn.tipsy.autoNS=function(){
return $(this).offset().top > ($(document).scrollTop() + $(window).height() / 2) ? 's':'n';
};
$.fn.tipsy.autoWE=function(){
return $(this).offset().left > ($(document).scrollLeft() + $(window).width() / 2) ? 'e':'w';
};
$.fn.tipsy.autoBounds=function(margin, prefer){
return function(){
var dir={ns: prefer[0], ew: (prefer.length > 1 ? prefer[1]:false)},
boundTop=$(document).scrollTop() + margin,
boundLeft=$(document).scrollLeft() + margin,
$this=$(this);
if($this.offset().top < boundTop) dir.ns='n';
if($this.offset().left < boundLeft) dir.ew='w';
if($(window).width() + $(document).scrollLeft() - $this.offset().left < margin) dir.ew='e';
if($(window).height() + $(document).scrollTop() - $this.offset().top < margin) dir.ns='s';
return dir.ns + (dir.ew ? dir.ew:'');
}};})(jQuery);
jQuery(document).ready(function($){
if($('.wp_shortcodes_toggle').length){
$(".togglec").hide();
$(".wps_togglet").click(function(){
$(this).toggleClass("toggleta").next(".togglec").slideToggle("normal");
});
}
if($('.wp_shortcodes_tabs').length){
$('.wp_shortcodes_tabs').each(function(){
var $this=$(this);
$this.find('.tab_content').slice(1).hide();
$this.find('ul.wps_tabs li:first').addClass('active');
$this.find('ul.wps_tabs li a').click(function(e){
e.preventDefault();
var $this_a=$(this);
var $tab=$this.find('#'+$this_a.data('tab'));
if(! $tab.is(':visible')){
$this.find('.tab_content').hide();
$this_a.parent().addClass('active').siblings().removeClass('active');
$tab.fadeIn(600);
}});
});
}
if($('.wp_shortcodes_tooltip').length){
$('.wp_shortcodes_tooltip').each(function(index, el){
var $this=$(this),
ttgravity=$this.data('gravity'),
ttfade=Boolean($this.data('fade'));
$this.tipsy({gravity: ttgravity, fade: ttfade});
});
}});